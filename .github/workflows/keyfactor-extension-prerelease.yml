# This workflow will build a Release Candidate (pre-release)
# It runs automatically when attempting a PR from pre-release branch to the release branch

name: Keyfactor Extension - Release Candidate

env:
  SOLUTION_FOLDER: '.'
  PROJECT_FOLDER: 'PaloAlto'

# Controls when the action will run. 
on:
  # Triggers the workflow on PR open
  pull_request:
    types: [opened, synchronize]
    # only run this workflow when opening PR to release branch
    branches: 
        - '!release-[0-9]+.[0-9]+-pre' 
        - 'release-[0-9]+.[0-9]+' 
        
  # Release Candidate can be triggered manually
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Setup Envrionment
        id: setup_env
        run: |
            echo "Setup Envrionment Variables for Workflow"
            echo "Working Path: ${Env:GITHUB_WORKSPACE}"
            $slnPath = (Get-ChildItem -Include *.sln -File -Recurse).fullname
            $relName = "${{ github.base_ref }}".Split("/")
            $repoName = "${{ github.repository }}".Split("/")
            $relVersion = "${{ github.base_ref }}".Split("-")
            echo "Solution File Path: ${slnPath}"
            echo "SOLUTION_PATH=${slnPath}" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
            echo "Release Name: $($relName[-1])"
            echo "RELEASE_NAME=$($relName[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
            echo "Repo Name: $($repoName[-1])"
            echo "REPO_NAME=$($repoName[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
            echo "Release Version: $($relVersion[-1])"
            echo "RELEASE_VERSION=$($relVersion[-1])" | Out-File $env:GITHUB_ENV -Encoding utf8 -Append
        
      - uses: actions/setup-dotnet@v1
        with:
            dotnet-version: '3.1.x' # SDK Version to use; x will use the latest version of the 3.1 channel      
            #dotnet-version: 
        
      - name: Add Package Source
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/Keyfactor/index.json -n github -u ${{ github.actor }} -p ${{ secrets.BUILD_PACKAGE_ACCESS }} --store-password-in-clear-text
      
      # Configures msbuild path envrionment
      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1
      
      # Restores Packages to Local Machine
      - name: restore nuget packages
        run: |
          nuget restore ${{ env.SOLUTION_PATH  }}
          
      - name: GitHub Script checks for existing version tags
        id: existing_version
        uses: actions/github-script@v4.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_NUMBER: ${{ env.RELEASE_VERSION }}
        with:
          script: |
            // check for existing tags on this major.minor version
            const tagsList = await github.git.listMatchingRefs({
             owner: context.repo.owner,
             repo: context.repo.repo,
             ref: 'tags'
            });
            
            const { VERSION_NUMBER } = process.env;
            const tags = tagsList.data.reverse();
            
            // assume linear release pattern - i.e. always working on latest major.minor version
            // if there are no tags, or latest tag does not start with VERSION_NUMBER, set a manual version for release
            if (tags.length < 1
                || !tags.shift().ref.startsWith(`refs/tags/${VERSION_NUMBER}`)) {
              core.exportVariable('MANUAL_VERSION', `${VERSION_NUMBER}.0-rc.0`);
            }
            
      # Create a new release to auto-increment (or use manual version number)
      - name: Create new release
        id: create_release
        #uses: zendesk/action-create-release@v1
        uses: keyfactor/action-create-release@786b73035fa09790f9eb11bb86834a6d7af1c256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MANUAL_VERSION: ${{ env.MANUAL_VERSION }}
        with:
          release_name: Release Candidate ${{ env.REPO_NAME }} ${{ env.RELEASE_VERSION }} 
          body: |
            [Changelog](../CHANGELOG.MD)
          draft: false
          prerelease: true
          prerelease_suffix: rc
          tag_name: ${{ env.MANUAL_VERSION }}
          auto_increment_type: prerelease
          tag_schema: semantic
          commitish: ${{ github.sha }}          
                    
      # update version number of AssemblyInfo.cs file
      - name: Increment Assembly Version
        run: |
            $VersionRegex = "\d+\.\d+\.\d+"
            $assemblyInfoFiles = (Get-ChildItem -Include AssemblyInfo.cs -File -Recurse).fullname
            $newVer = "${{ steps.create_release.outputs.current_tag }}".TrimStart('v').Split('-')[0]
            echo "Prepared to overwrite Assembly version to: ${newVer}"
            foreach ($assemblyInfoFile in $assemblyInfoFiles)
            {
              $filecontent = Get-Content($assemblyInfoFile)
              attrib $assemblyInfoFile -r
              $filecontent -replace $VersionRegex, $newVer | Out-File $assemblyInfoFile
            }
      
      # Runs a set of commands using the runners shell
      - name: Execute MSBuild Commands
        run: |
          MSBuild.exe $Env:SOLUTION_PATH -p:RestorePackagesConfig=true -p:Configuration=Release 

      - name: Archive Files
        run: |
           md ${{ github.workspace }}\zip\Keyfactor
           Compress-Archive -Path `
           ${{ env.SOLUTION_FOLDER }}\${{ env.PROJECT_FOLDER }}\bin\Release\*.dll, `
           ${{ env.SOLUTION_FOLDER }}\${{ env.PROJECT_FOLDER }}\bin\Release\*.json, `
           ${{ env.SOLUTION_FOLDER }}\${{ env.PROJECT_FOLDER }}\bin\Release\*.config `
           -DestinationPath ${{ github.workspace }}\zip\Keyfactor\$Env:REPO_NAME.zip -Force
      

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.2
        with:
          # Artifact name
          name: ${{ env.REPO_NAME }}.zip
          # A file, directory or wildcard pattern that describes what to upload
          path: |
            ${{ github.workspace }}\zip\Keyfactor\${{ env.REPO_NAME}}.zip
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error # optional, default is warn
    
      - name: Upload Release Asset (x64)
        id: upload-release-asset-x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}\zip\Keyfactor\${{ env.REPO_NAME}}.zip
          asset_name: ${{ env.REPO_NAME}}_${{ steps.create_release.outputs.current_tag }}.zip
          asset_content_type: application/zip                 
